@use "sass:color" as color;

@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');

@font-face {
  font-family: "ToshibaSat8x14";
  src: url("/fonts/Web437_ToshibaSat_8x14.woff2") format("woff2"),
    url("/fonts/Web437_ToshibaSat_8x14.woff") format("woff");
  font-display: swap;
  font-weight: normal;
  font-style: normal;
}

html,
body {
  margin: 0;
  padding: 0;
  background: var(--background);
  color: var(--foreground);
  font-family: "ToshibaSat8x14", "Menlo", "Monaco", "Consolas", "Courier New",
    monospace;
  min-height: 100vh;
}

* {
  box-sizing: border-box;
  font-size: 1.069rem;
}

a,
button {
  color: var(--cyan);
  font-family: inherit;
  text-decoration: none;
  background: none;
  border: none;
  cursor: pointer;
}

a:hover,
a:focus {
  text-decoration: underline;
}

.vim-root {
  display: block;
  min-height: calc(100vh - var(--cmdbar-height));
  font-family: inherit;
  background-color: var(--background);
}

/* Global typography defaults (moved from _blog.scss) */
h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.6;
  text-align: left;
  color: var(--purple);
}

h1 {
  font-size: 1.5rem;
}

h2,
h3 {
  font-size: 1.3rem;
}

h4 {
  font-size: 1.1rem;
}

h5 {
  font-size: 1rem;
}

h6 {
  font-size: 0.8rem;
}

p {
  text-align: left;
  line-height: 1.6;
}

pre {
  color: var(--code-fg);
  border-radius: 8px;
  overflow: auto;
  line-height: 1.5;
  margin: 1rem 0;
  white-space: pre-wrap;
  word-break: break-word;
}

code {
  padding: 0;
  border-radius: 4px;
  font-family: inherit;
  color: var(--code-inline-color);
}

ul,
ol {
  margin-left: 1.1rem;
  padding-left: 1rem;
  margin-bottom: 1rem;
}

li {
  margin: 0.45rem 0;
}

pre[class*="astro-code"] {
  background-color: rgba(var(--foreground-rgb), 0.069) !important;
  color: inherit !important;
  overflow-x: visible !important;
  padding: 0.8rem;
  line-height: 0.9;
  font-family: "JetBrains Mono", "Menlo", "Monaco", "Consolas", "Courier New",
    monospace !important;
  border-radius: 0;

  span {
    font-size: 0.8rem !important;
  }
}

/* Accessible utility: visually-hidden but available to screen readers */
.sr-only {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

.vim-main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: calc(100vh - var(--cmdbar-height));
}

.main-flex-container {
  display: flex;
  align-items: stretch;
}

$cmdbar-height: 30px;

.centered-vim {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: calc(100vh - #{$cmdbar-height});
  text-align: center;
}

.vim-menu {
  display: flex;
  gap: 2rem;
  margin-top: 2rem;
  font-size: 1.2rem
}

.vim-menu span {
  color: var(--orange);
}



.cmd-input {
  outline: none;
  min-width: 2ch;
  background: transparent;
  border: none;
  /* Let inputs inherit color so inside .command-bar they use the dark page background color */
  color: inherit;
  font-family: inherit;
  font-size: 1rem;
  /* hide native caret so the custom rectangular cursor is used */
  caret-color: transparent;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  padding: 0.1rem 0.25rem;
  width: 100%;
  max-width: min(60ch, 90vw);
}

.cmd-feedback {
  margin-left: 1rem;
  color: var(--comment);
  font-size: 0.95rem
}

.cmd-input::placeholder {
  color: rgba(var(--background-rgb), 0.3);
  opacity: 1;
}

/* Hide the placeholder while in error state so it doesn't overlap the error message */
.command-bar.error .cmd-input::placeholder {
  color: transparent !important;
  opacity: 0 !important;
}

.vim-error {
  position: fixed;
  left: 0.5rem;
  bottom: 0.4rem;
  display: inline-flex;
  align-items: center;
  padding: 0.3rem 0.4rem;
  background: #8b0000;
  color: #fff;
  font-family: inherit;
  font-size: 1rem;
  z-index: 10000;
  border-radius: 0;
  box-shadow: none;
  max-width: calc(100vw - 5rem);
}

.cmd-wrapper {
  position: relative;
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  margin-left: -8px;
}

.command-bar {
  /* Make the command bar full-width and stick to the bottom while
     respecting device safe-area insets (iOS notch / bottom UI). */
  position: fixed;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 10000;
  display: block;
  width: 100vw;
  /* full-bleed background; inner wrapper provides padding */
  padding: 0;
  /* inner handles padding including safe-area */
  background: var(--foreground);
  /* foreground becomes background */
  color: var(--background);
  /* text uses page background color */
  backdrop-filter: none;
  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.2);
  /* Ensure it sits above other content without overlapping interactive elements */
  -webkit-tap-highlight-color: transparent;
}

.command-bar-inner {
  display: flex;
  align-items: center;
  padding: 0.35rem 0.75rem calc(env(safe-area-inset-bottom, 0) + 0.35rem);
}

/* Left area inside the command bar for small persistent info (copyright etc) */
.command-bar .cmd-right {
  margin-left: 1rem;
  color: rgba(var(--background-rgb), 0.3);
  /* match the input placeholder color */
  font-size: 0.95rem;
  white-space: nowrap;
  opacity: 1;
  flex: 0 0 auto;
}

/* Hide the right copyright when the command bar is in error state so it doesn't overlap the error text */
.command-bar.error .cmd-right {
  display: none;
}

.cmd-cursor {
  position: absolute;
  top: 0;
  left: 0;
  /* default background; overridden in context-sensitive places */
  background: var(--foreground);
  opacity: 0.95;
  display: none;
  transform: translateY(0.1em);
  border-radius: 2px;
  pointer-events: none;
  z-index: 10001;
  animation: cmd-cursor-blink 1s steps(1) infinite
}

/* Ensure the block cursor inside the command bar uses the text color (currentColor)
   so it contrasts against the bar background */
.command-bar .cmd-cursor {
  background: currentColor;
}

/* Ensure inputs inside the command bar inherit the visible color, and the block cursor sits above the input text */
.command-bar .cmd-input {
  color: currentColor;
  background: transparent;
  position: relative;
  z-index: 1;
}

.command-bar .cmd-cursor {
  z-index: 10002;
}

.command-bar-focused {
  overscroll-behavior: contain
}

.cmd-cursor {
  display: inline-block;
  height: 1em
}

/* Error state for command bar: use red background and show error text inline */
.command-bar.error {
  background: var(--red);
  color: var(--background);
  /* keep text readable */
}

.command-bar .vim-error-inline {
  display: inline-block;
  font-size: 0.95rem;
  color: inherit;
  margin-left: 0.5rem;
}

@keyframes cmd-cursor-blink {
  50% {
    opacity: 0
  }
}

.sun-spin-wrap {
  display: flex;
  width: 100%;
  justify-content: center;
  align-items: center;
  padding: 0 1rem;
  box-sizing: border-box;
  margin: 1rem 0;
  border-radius: 0.25rem;
  background: transparent;
  overflow-x: auto;
}

.sun-pre {
  margin: 0;
  color: var(--orange);
  font-family: inherit;
  white-space: pre;
  line-height: 0.95;
  font-size: 0.4rem;
  display: block;
  text-align: center;
  max-width: 100%;
  overflow-wrap: normal;
}

.sr-only {
  position: absolute !important;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* CRT tunable variables (use SCSS variables) */
$crt-red-color: rgb(218, 49, 49);
$crt-green-color: rgb(112, 159, 115);
$crt-blue-color: rgb(40, 129, 206);
$crt-stripe-width: 3px; // width of a single color stripe (larger = fewer stripes)
$crt-stripe-opacity: 0.12; // opacity for the colored stripes (higher -> more visible)
$crt-scan-opacity: 0.7; // scanline darkness (slightly stronger)
$crt-vignette-opacity: 0.6; // vignette darkness (0..1)
$crt-flicker-duration: 2s; // flicker animation duration (very slow, extremely subtle)
$crt-contrast: 1;
$crt-saturate: 2;
$crt-ca-blur: 0.35px;

#crt-overlay-container {
  position: fixed;
  inset: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none;
  z-index: 0;

  /* Keep base invisible unless enabled */
  &::before,
  &::after {
    content: "";
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: 99999;
    display: none;
  }

  /* When enabled, show tint & scanlines + RGB stripes */
  &.crt-enabled {
    &::before {
      /* Stronger chromatic stripes: horizontal RGB stripes layered with a subtle tint */
      display: block;
      /* Add a top black fade to mask mobile status bar areas (uses safe-area inset where available) */
      background-image: linear-gradient(rgba(8, 8, 8, 0.16), rgba(8, 8, 8, 0.16)),
      repeating-linear-gradient(to right,
        rgba($crt-red-color, $crt-stripe-opacity) 0px,
        rgba($crt-green-color, $crt-stripe-opacity) #{$crt-stripe-width},
        rgba($crt-blue-color, $crt-stripe-opacity) #{($crt-stripe-width * 2)});
      background-repeat: repeat, repeat;
      background-size: auto, auto;

      /* Mobile-only: add a top black fade for status bar, with reduced height */
      @media (max-width: 480px) {
        background-image: linear-gradient(to bottom,
          rgba(0, 0, 0, 0.98) 0%,
          rgba(0, 0, 0, 0.92) 18%,
          rgba(0, 0, 0, 0.7) 38%,
          rgba(0, 0, 0, 0.25) 60%,
          rgba(0, 0, 0, 0) 100%),
        linear-gradient(rgba(8, 8, 8, 0.16), rgba(8, 8, 8, 0.16)),
        repeating-linear-gradient(to right,
          rgba($crt-red-color, $crt-stripe-opacity) 0px,
          rgba($crt-green-color, $crt-stripe-opacity) #{$crt-stripe-width},
          rgba($crt-blue-color, $crt-stripe-opacity) #{($crt-stripe-width * 2)});
        background-repeat: no-repeat, repeat, repeat;
        background-size: 100% calc(env(safe-area-inset-top, 64px) + 64px), auto, auto;
      }

      mix-blend-mode: screen;
      opacity: 0.8;
      transform: translate3d(2px, 0, 0);
      filter: blur($crt-ca-blur);
    }

    &::after {
      /* Vertical colored stripes and scanlines layered to enhance CA */
      display: block;
      /* Add a radial vignette on top to focus center and darken edges.
         Use $crt-vignette-opacity (0..1) to control strength so tweaks are predictable. */
      // compute vignette alpha as a number and build the rgba() color string so Sass treats it as a number
      $vignette-alpha: $crt-vignette-opacity * 0.72;
      $vignette-rgba: "rgba(0, 0, 0, #{$vignette-alpha})";
      background-image: radial-gradient(ellipse at center, rgba(0, 0, 0, 0) 30%, #{$vignette-rgba} 70%),
      repeating-linear-gradient(90deg,
        rgba($crt-red-color, $crt-stripe-opacity) 1px,
        rgba($crt-green-color, $crt-stripe-opacity) 2px,
        rgba($crt-blue-color, $crt-stripe-opacity) 3px),
      repeating-linear-gradient(to bottom,
        rgba(0, 0, 0, $crt-scan-opacity) 0px,
        rgba(0, 0, 0, $crt-scan-opacity) 1px,
        transparent 1px,
        transparent 3px);
      mix-blend-mode: multiply;
      /* Slightly stronger overlay to make vignette obvious. Blend overall overlay opacity with the vignette variable
      so changes to $crt-vignette-opacity are visible even when box-shadow alpha alone was not obvious. */
      opacity: #{0.6 + ($crt-vignette-opacity * 0.4)};
      $vignette-color: color.adjust(#000, $lightness: -18%);
      /* Increase inset shadow spread and blur for a stronger falloff; use $crt-vignette-opacity for alpha. */
      box-shadow: inset 0 0 360px rgba(color.channel($vignette-color, "red", $space: rgb),
          color.channel($vignette-color, "green", $space: rgb),
          color.channel($vignette-color, "blue", $space: rgb),
          $crt-vignette-opacity );
      transform: translate3d(-2px, 0, 0);
      filter: blur($crt-ca-blur * 1.2);
    }

    /* subtle animated flicker */
    animation: crt-flicker #{$crt-flicker-duration} infinite alternate;
    /* Use interpolation to ensure Sass doesn't try to call built-in color functions */
    filter: #{'contrast('}#{$crt-contrast}#{')'} #{'saturate('}#{$crt-saturate}#{')'} hue-rotate(6deg);
  }
}

/* Ensure main content sits above the overlay so text-shadow/CA is visible */
.vim-main-content {
  position: relative;
  z-index: 1;
}

$rgb-offset: 2px;

/* Root selector: when CRT is enabled on the body, apply chromatic fringe site-wide */
/* Apply chromatic fringe to main content and to text inside the command bar only.
  Avoid styling the `.command-bar` container itself to prevent layout/height changes
  (fixes the accidental gap under the fixed command bar). */
body.crt-text-ca .vim-main-content,
body.crt-text-ca .vim-main-content *,
body.crt-text-ca .command-bar * {
  -webkit-font-smoothing: antialiased;
  /* Unified, balanced chromatic fringe (hard-coded offsets as requested) */
  text-shadow: $rgb-offset 0 #{$crt-ca-blur} rgba($crt-red-color, 0.14),
  -$rgb-offset 0 #{$crt-ca-blur} rgba($crt-green-color, 0.26),
  0 $rgb-offset #{$crt-ca-blur} rgba($crt-blue-color, 0.26),
  0 0 0.35px rgba(0, 0, 0, 0.10);
  filter: contrast(1.02);
}

@keyframes crt-flicker {
  0% {
    opacity: 0.97;
    filter: brightness(1.00);
  }

  10% {
    opacity: 0.98;
    filter: brightness(1.01);
  }

  50% {
    opacity: 0.96;
    filter: brightness(0.99);
  }

  90% {
    opacity: 0.98;
    filter: brightness(1.01);
  }

  100% {
    opacity: 0.97;
    filter: brightness(1.00);
  }
}

.hide-on-mobile {
  display: block;
}

@media (max-width: 480px) {
  .sun-pre {
    font-size: 0.25rem;
    line-height: 1.15;
  }

  .hide-on-mobile {
    display: none !important;
  }
}