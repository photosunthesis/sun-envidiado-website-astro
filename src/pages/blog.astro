---
import BaseLayout from "../layouts/BaseLayout.astro";

// Import all Markdown blog posts in this folder (eager so frontmatter is available)
const modules = import.meta.glob("./blog/*.md", { eager: true });

// Build an array of posts with frontmatter and url
type Post = { title: string; pubDate: Date; url: string; index?: number };
const postList = Object.entries(modules)
  .map(([path, mod]) => {
    const parts = path.split("/");
    const last = parts.pop() || "";
    const slug = last.replace(/\.md$/, "");
    const fm = (mod as any).frontmatter || {};
    const pubDate = fm.pubDate ? new Date(fm.pubDate) : null;
    return {
      title: fm.title || slug,
      pubDate,
      url: `/blog/${slug}`,
    } as Post;
  })
  .filter((p) => p.pubDate) as Post[];

// Sort by date desc
postList.sort((a, b) => b.pubDate.valueOf() - a.pubDate.valueOf());

// Add stable numeric index (1-based) for command selection and index listing
postList.forEach((p, i) => (p.index = i));

// Group by year
const grouped: Record<number, Post[]> = {};
for (const post of postList) {
  const year = post.pubDate.getFullYear();
  if (!grouped[year]) grouped[year] = [];
  grouped[year].push(post);
}

const homeUrlLabel = ":home<Enter>";
const blogIndexLabel = ":blog[index]";

// SEO / Structured Data
const siteBase = Astro.site || "https://sun-envidiado.com";
const pagePath = "/blog";
const absoluteUrl = new URL(pagePath, siteBase).toString();
const imagePath = "/android-chrome-512x512.png";
const absoluteImage = new URL(imagePath, siteBase).toString();

// Minimal JSON-LD for a blog index / collection page
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  name: "Blog — Sun Envidiado",
  description:
    "A collection of blog posts about code, projects, gaming, and life.",
  url: absoluteUrl,
  image: absoluteImage,
  hasPart: postList.slice(0, 10).map((p) => ({
    "@type": "BlogPosting",
    headline: p.title,
    url: new URL(p.url, siteBase).toString(),
    datePublished: p.pubDate.toISOString(),
  })),
};
---

<BaseLayout
  title="Blog — Sun Envidiado"
  url={absoluteUrl}
  description="Blog posts by Sun Envidiado about coding, projects, and life."
  image={absoluteImage}
  type="collection"
  tags={["blog", "posts", "coding"]}
  jsonLd={jsonLd}
>
  <div class="blog-content">
    <header class="blog-header">
      <h1 id="blog-title" class="sr-only">Blog</h1>
      <p class="blog-content-start">
        Select a blog post by clicking its title or typing <a
          href="/"
          aria-label="Open blog index">{blogIndexLabel}</a
        >. To return to the homepage, click or type <a
          href="/"
          aria-label="Go to homepage">{homeUrlLabel}</a
        >.
      </p>
    </header>
    <div class="posts-wrapper">
      {
        Object.keys(grouped)
          .sort((a, b) => Number(b) - Number(a))
          .map((year) => (
            <section class="year-group">
              <h2 class="year-heading" id={`year-${year}`}>
                {year}
              </h2>
              <ul class="year-list" aria-labelledby={`year-${year}`}>
                {grouped[Number(year)].map((post) => (
                  <li
                    class="post-row"
                    data-blog-index={post.index}
                    data-blog-url={post.url}
                  >
                    <span class="post-index">{post.index}</span>
                    <a class="post-link" href={post.url} rel="bookmark">
                      {post.title}
                    </a>
                    <time
                      class="post-date"
                      datetime={post.pubDate.toISOString()}
                    >
                      {post.pubDate.toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                        year: "numeric",
                      })}
                    </time>
                  </li>
                ))}
              </ul>
            </section>
          ))
      }
    </div>
  </div>
</BaseLayout>
