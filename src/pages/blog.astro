---
import BaseLayout from "../layouts/BaseLayout.astro";

// Import all Markdown blog posts in this folder (eager so frontmatter is available)
const postModules = import.meta.glob<{ frontmatter?: { title?: string; pubDate?: string } }>(
	"./blog/**/*.md",
	{ eager: true },
);

// Types for clarity
type Frontmatter = { title?: string; pubDate?: string };
type CandidatePost = { title: string; pubDate?: Date; url: string };
type PublishedPost = { title: string; pubDate: Date; url: string; index: number };

// Helpers
const slugFromPath = (path: string) => {
	// Remove the .md extension
	const withoutExt = path.replace(/\.md$/, "");
	// Get everything after /blog/
	const afterBlog = withoutExt.split("/blog/")[1];
	// If it ends with /index, remove that part to get clean URLs
	return afterBlog?.replace(/\/index$/, "") ?? "";
};

const parsePubDate = (value?: unknown): Date | undefined => {
	if (!value) return undefined;
	const d = new Date(String(value));
	return Number.isFinite(d.valueOf()) ? d : undefined;
};

const makeCandidate = (path: string, mod: { frontmatter?: Frontmatter }): CandidatePost => {
	const slug = slugFromPath(path);
	const fm = mod.frontmatter ?? {};
	return {
		title: String(fm.title ?? slug),
		pubDate: parsePubDate(fm.pubDate),
		url: `/blog/${slug}`,
	};
};

// Build, filter, sort and index posts in a clear pipeline
const candidatePosts: CandidatePost[] = Object.entries(postModules).map(([p, m]) =>
	makeCandidate(p, m),
);

const posts: PublishedPost[] = candidatePosts
	.filter((c): c is CandidatePost & { pubDate: Date } => Boolean(c.pubDate))
	.sort((a, b) => b.pubDate.valueOf() - a.pubDate.valueOf())
	.map((p, i) => ({ title: p.title, pubDate: p.pubDate as Date, url: p.url, index: i }));

// Group posts by year using reduce for clarity
const postsByYear: Record<number, PublishedPost[]> = posts.reduce(
	(acc, p) => {
		const year = p.pubDate.getFullYear();
		(acc[year] ||= []).push(p);
		return acc;
	},
	{} as Record<number, PublishedPost[]>,
);

// Keep older variable names compatible with templates below
const postList = posts;
const grouped = postsByYear;

// Centralized page copy for blog index
const siteCopy = {
	homeUrlLabel: ":home<Enter>",
	blogIndexLabel: ":blog[index]",
	pageHeadline: "Blog",
	contentStartPrefix: "Select a blog post by typing",
	contentReturnPrefix: "To return to the homepage, type",
	ariaOpenBlogIndex: "Open blog index",
	ariaGoHomepage: "Go to homepage",
};

// SEO-optimized metadata
const seoMeta = {
	title: "Blog â€” Sun Envidiado | Coding, Gaming, and Life Updates",
	description:
		"Read blog posts by Sun Envidiado about software development, Flutter, web technologies, gaming experiences, and personal life updates. Honest thoughts on tech and life.",
	tags: [
		"sun envidiado blog",
		"software development blog",
		"flutter blog",
		"web development articles",
		"tech blog manila",
		"developer blog",
		"coding tutorials",
	],
};

// SEO / Structured Data
const siteBase = Astro.site || "https://sun-envidiado.com";

// Optimized JSON-LD for a blog with individual posts
const jsonLd = {
	"@context": "https://schema.org",
	"@type": "Blog",
	"@id": `${siteBase}/blog#blog`,
	name: seoMeta.title,
	description: seoMeta.description,
	url: `${siteBase}/blog`,
	author: {
		"@type": "Person",
		"@id": `${siteBase}/#person`,
		name: "Sun Envidiado",
	},
	blogPost: postList.map((p) => ({
		"@type": "BlogPosting",
		headline: p.title,
		url: new URL(p.url, siteBase).toString(),
		datePublished: p.pubDate.toISOString(),
		author: {
			"@type": "Person",
			name: "Sun Envidiado",
		},
	})),
};
---

<BaseLayout
	title={seoMeta.title}
	description={seoMeta.description}
	tags={seoMeta.tags}
	type="website"
	jsonLd={jsonLd}
>
	<div class="blog-content">
		<header class="blog-header">
			<h1 id="blog-title" class="sr-only">{siteCopy.pageHeadline}</h1>
			<p class="blog-content-start">
				{siteCopy.contentStartPrefix}
				<a href="/" aria-label={siteCopy.ariaOpenBlogIndex}>{siteCopy.blogIndexLabel}</a>.
				{siteCopy.contentReturnPrefix}
				<a href="/" aria-label={siteCopy.ariaGoHomepage}>{siteCopy.homeUrlLabel}</a>.
			</p>
		</header>
		<div class="posts-wrapper">
			{
				Object.keys(grouped)
					.sort((a, b) => Number(b) - Number(a))
					.map((year) => (
						<section class="year-group">
							<h2 class="year-heading" id={`year-${year}`}>
								{year}
							</h2>
							<ul class="year-list" aria-labelledby={`year-${year}`}>
								{grouped[Number(year)].map((post) => (
									<li class="post-row" data-blog-index={post.index} data-blog-url={post.url}>
										<span class="post-index">{post.index}</span>
										<a class="post-link" href={post.url} rel="bookmark">
											{post.title}
										</a>
										<time class="post-date hide-on-mobile" datetime={post.pubDate.toISOString()}>
											{post.pubDate.toLocaleDateString("en-US", {
												month: "short",
												day: "numeric",
												year: "numeric",
											})}
										</time>
									</li>
								))}
							</ul>
						</section>
					))
			}
		</div>
	</div>
</BaseLayout>
