---
import BaseLayout from "../layouts/BaseLayout.astro";
import SpinningSunAsciiArt from "../components/SpinningSunAsciiArt.astro";

const siteCopy = {
	siteName: "Sun Envidiado",
	headingText: `Hi! I'm Sun Envidiado.\nWelcome to my little corner on the internet.`,
	introText: `I'm a software developer, gamer, and karaoke enthusiast. This space is where you can get to know me better and peek into my thoughts about code, games, life, whatever's on my mind. Navigate around using the commands below.`,
	commands: [
		{
			label: ":about<Enter>",
			token: ":about",
			href: "/about",
			leadingText: "type",
			trailingText: "to learn more about me.",
		},
		{
			label: ":contact<Enter>",
			token: ":contact",
			href: "/contact",
			leadingText: "type",
			trailingText: "to get in touch.",
		},
		{
			label: ":blog<Enter>",
			token: ":blog",
			href: "/blog",
			leadingText: "type",
			trailingText: "to read my latest blogs.",
		},
	],
};

// SEO-optimized metadata
const seoMeta = {
	title: "Sun Envidiado",
	description:
		"Hey, I'm Sun! I code stuff (mostly Flutter these days), game way too much, and sing my heart out at karaoke. This is my little corner of the internet where I share thoughts on code, games, and whatever else is on my mind.",
	tags: ["sun envidiado", "personal website", "developer blog", "gaming", "coding", "manila"],
};

// JSON-LD Structured Data for better SEO
const siteBase = Astro.site ?? "https://sun-envidiado.com";
const imageUrl = new URL("/default.png", siteBase).toString();

const jsonLd = {
	"@context": "https://schema.org",
	"@graph": [
		{
			"@type": "WebSite",
			"@id": `${siteBase}/#website`,
			url: siteBase,
			name: "Sun Envidiado",
			description: seoMeta.description,
			inLanguage: "en-US",
		},
		{
			"@type": "Person",
			"@id": `${siteBase}/#person`,
			name: "Sun Envidiado",
			url: siteBase,
			image: imageUrl,
			jobTitle: "Software Developer",
			description: seoMeta.description,
			knowsAbout: [
				"Flutter",
				"Dart",
				"JavaScript",
				"Web Development",
				"Mobile Development",
				"C#",
				".NET",
				"PHP",
				"Laravel",
			],
			sameAs: ["https://github.com/photosunthesis", "https://www.linkedin.com/in/sunenvidiado/"],
		},
	],
};
---

<BaseLayout
	title={seoMeta.title}
	description={seoMeta.description}
	tags={seoMeta.tags}
	type="website"
	jsonLd={jsonLd}
>
	<div class="index-main-content">
		<SpinningSunAsciiArt />
		<div class="intro-container">
			<h1 class="sr-only">Sun Envidiado</h1>
			<span class="intro-heading">{siteCopy.headingText}</span>
			<span class="intro-body">{siteCopy.introText}</span>
		</div>
		<nav class="command-hints-container" aria-label="Quick commands">
			<div class="command-hints-grid">
				{
					siteCopy.commands.map((cmd) => (
						<div class="command-hint-row">
							<span class="command-hint-type">{cmd.leadingText}</span>
							<span class="command-hint-command">
								<span class="command-action-group">
									{cmd.href ? (
										<a
											class="command-action command-hint-action"
											href={cmd.href}
											data-command={cmd.token}
											aria-label={`Go to ${cmd.token}`}
										>
											{cmd.label}
										</a>
									) : (
										<button
											class="command-hint-action"
											type="button"
											data-command={cmd.token}
											aria-label={`Run ${cmd.token}`}
										>
											{cmd.label}
										</button>
									)}
								</span>
							</span>
							<span class="command-hint-description">{cmd.trailingText}</span>
						</div>
					))
				}
			</div>
		</nav>
	</div>
</BaseLayout>

<script>
	import { navigate } from "astro:transitions/client";

	// Command click handler: uses event delegation and prefers a site-level command API
	// if available (window.__runSiteCommand). Otherwise it falls back to navigation or
	// toggling CRT state.
	const onDocumentClick = (ev: MouseEvent) => {
		const target = ev.target;
		if (!(target instanceof Element)) return;

		// Narrowed to HTMLElement so TypeScript recognizes `blur`
		const actionEl = target.closest(".command-hint-action") as HTMLElement | null;
		if (!actionEl) return;

		ev.preventDefault();

		const token = (actionEl.getAttribute("data-command") || actionEl.textContent || "").trim();

		// Blur so focus styles don't persist on click
		if (typeof actionEl.blur === "function") actionEl.blur();

		// Prefer site-level command runner when available
		const runner = window.__runSiteCommand;
		if (typeof runner === "function") {
			try {
				runner(token, true);
				return;
			} catch {
				// TODO Implement
			}
		}

		// Built-in fallbacks
		switch (token) {
			case ":about":
				navigate("/about");
				break;
			case ":contact":
				navigate("/contact");
				break;
			case ":blog":
				navigate("/blog");
				break;
			case ":crt":
				try {
					localStorage.setItem("crt-enabled", "1");
				} catch (err) {
					console.debug("localStorage set failed", err);
				}
				document.querySelector("#crt-overlay-container")?.classList.add("crt-enabled");
				document.body?.classList.add("crt-text-ca");
				break;
			case ":no-crt":
				try {
					localStorage.setItem("crt-enabled", "0");
				} catch (err) {
					console.debug("localStorage set failed", err);
				}
				document.querySelector("#crt-overlay-container")?.classList.remove("crt-enabled");
				document.body?.classList.remove("crt-text-ca");
				break;
			default:
				break;
		}
	};

	document.addEventListener("click", onDocumentClick);
	// Cleanup if the page uses client-side navigation/hMR during development
	if (import.meta.hot) {
		import.meta.hot.dispose(() => document.removeEventListener("click", onDocumentClick));
	}
</script>
