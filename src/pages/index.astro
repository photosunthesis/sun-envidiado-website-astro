---
import BaseLayout from "../layouts/BaseLayout.astro";
import SpinningSunAsciiArt from "../components/SpinningSunAsciiArt.astro";

// Content shown on the page
const headingText = `Hi! I'm Sun Envidiado.\nWelcome to my little corner on the internet.`;
const introText = `I like building software, playing games (hooked on Helldivers 2 atm), and karaoke. Here you'll find my thoughts on coding, gaming, and life.`;

// Command definitions for the quick-command UI. Each command can optionally map to a navigation href.
type SiteCommand = {
	label: string;
	token: string;
	href: string;
	leadingText: string;
	trailingText: string;
};

const commands: SiteCommand[] = [
	{
		label: ":about<Enter>",
		token: ":about",
		href: "/about",
		leadingText: "type",
		trailingText: "to learn more about me.",
	},
	{
		label: ":contact<Enter>",
		token: ":contact",
		href: "/contact",
		leadingText: "type",
		trailingText: "to get in touch.",
	},
	{
		label: ":blog<Enter>",
		token: ":blog",
		href: "/blog",
		leadingText: "type",
		trailingText: "to read my latest blogs.",
	},
	// TODO Specify CRT toggle commands
];

const siteBase = Astro.site ?? "https://sun-envidiado.com";
const pagePath = "/";
const pageUrl = new URL(pagePath, siteBase).toString();
const imagePath = "/android-chrome-512x512.png";
const imageUrl = new URL(imagePath, siteBase).toString();

const websiteJsonLd = {
	"@context": "https://schema.org",
	"@type": "WebSite",
	url: siteBase,
	name: "Sun Envidiado",
	trailingText:
		"Personal site of Sun Envidiado — software developer, gamer, and karaoke enthusiast.",
	image: imageUrl,
	potentialAction: {
		"@type": "SearchAction",
		target: `${siteBase}/?s={search_term_string}`,
		"query-input": "required name=search_term_string",
	},
};

const personJsonLd = {
	"@context": "https://schema.org",
	"@type": "Person",
	name: "Sun Envidiado",
	url: siteBase,
	image: imageUrl,
	jobTitle: "Software Developer",
};
---

<BaseLayout
	title="Sun Envidiado"
	url={pageUrl}
	trailingText="Personal site of Sun Envidiado — software developer, gamer, and karaoke enthusiast."
	image={imageUrl}
	type="website"
	tags={["home", "sun-envidiado", "developer"]}
	jsonLd={{ ...websiteJsonLd, "@graph": [personJsonLd] }}
>
	<div class="index-main-content">
		<SpinningSunAsciiArt />
		<div class="intro-container">
			<h1 class="sr-only">Sun Envidiado</h1>
			<span class="intro-heading">{headingText}</span>
			<span class="intro-body">{introText}</span>
		</div>
		<nav class="command-hints-container" aria-label="Quick commands">
			<div class="command-hints-grid">
				{
					commands.map((cmd) => (
						<div class="command-hint-row">
							<span class="command-hint-type">{cmd.leadingText}</span>
							<span class="command-hint-command">
								<span class="command-action-group">
									{cmd.href ? (
										<a
											class="command-action command-hint-action"
											href={cmd.href}
											data-command={cmd.token}
											aria-label={`Go to ${cmd.token}`}
										>
											{cmd.label}
										</a>
									) : (
										<button
											class="command-hint-action"
											type="button"
											data-command={cmd.token}
											aria-label={`Run ${cmd.token}`}
										>
											{cmd.label}
										</button>
									)}
								</span>
							</span>
							<span class="command-hint-description">{cmd.trailingText}</span>
						</div>
					))
				}
			</div>
		</nav>
	</div>
</BaseLayout>

<script>
	// Command click handler: uses event delegation and prefers a site-level command API
	// if available (window.__runSiteCommand). Otherwise it falls back to navigation or
	// toggling CRT state.
	const onDocumentClick = (ev: MouseEvent) => {
		const target = ev.target;
		if (!(target instanceof Element)) return;

		// Narrowed to HTMLElement so TypeScript recognizes `blur`
		const actionEl = target.closest(".command-hint-action") as HTMLElement | null;
		if (!actionEl) return;

		ev.preventDefault();

		const token = (actionEl.getAttribute("data-command") || actionEl.textContent || "").trim();

		// Blur so focus styles don't persist on click
		if (typeof actionEl.blur === "function") actionEl.blur();

		// Prefer site-level command runner when available
		const runner = window.__runSiteCommand;
		if (typeof runner === "function") {
			try {
				runner(token, true);
				return;
			} catch {
				// TODO Implement
			}
		}

		// Built-in fallbacks
		switch (token) {
			case ":about":
				location.pathname = "/about";
				break;
			case ":contact":
				location.pathname = "/contact";
				break;
			case ":blog":
				location.pathname = "/blog";
				break;
			case ":crt":
				try {
					localStorage.setItem("crt-enabled", "1");
				} catch (err) {
					console.debug("localStorage set failed", err);
				}
				document.querySelector("#crt-overlay-container")?.classList.add("crt-enabled");
				document.body?.classList.add("crt-text-ca");
				break;
			case ":no-crt":
				try {
					localStorage.setItem("crt-enabled", "0");
				} catch (err) {
					console.debug("localStorage set failed", err);
				}
				document.querySelector("#crt-overlay-container")?.classList.remove("crt-enabled");
				document.body?.classList.remove("crt-text-ca");
				break;
			default:
				break;
		}
	};

	document.addEventListener("click", onDocumentClick);
	// Cleanup if the page uses client-side navigation/hMR during development
	if (import.meta.hot) {
		import.meta.hot.dispose(() => document.removeEventListener("click", onDocumentClick));
	}
</script>
