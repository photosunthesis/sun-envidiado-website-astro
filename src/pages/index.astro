---
import BaseLayout from "../layouts/BaseLayout.astro";
import SpinningSunAsciiArt from "../components/SpinningSunAsciiArt.astro";

const introHeading = `Hi! I'm Sun. 
Welcome to my little corner on the internet.`;

const introBody = `I like building software, playing games (hooked on Helldivers 2 atm), and belting out tunes at karaoke. Here, you'll find my thoughts on coding, gaming, and life.`;

type CommandAction = {
	label: string;
	command: string;
};

type CommandHint = {
	type: string;
	actions: CommandAction[];
	description: string;
};

const commandHints: CommandHint[] = [
	{
		type: "type",
		actions: [{ label: ":about<Enter>", command: ":about" }],
		description: "to learn more about me.",
	},
	{
		type: "type",
		actions: [{ label: ":contact<Enter>", command: ":contact" }],
		description: "to get in touch.",
	},
	{
		type: "type",
		actions: [{ label: ":blog<Enter>", command: ":blog" }],
		description: "to read my latest blogs.",
	},
	// {
	// 	type: "type",
	// 	actions: [
	// 		{ label: ":crt<Enter>", command: ":crt" },
	// 		{ label: ":no-crt<Enter>", command: ":no-crt" },
	// 	],
	// 	description: "to toggle CRT effects.",
	// },
];

const siteBase = Astro.site || "https://sun-envidiado.com";
const pagePath = "/";
const absoluteUrl = new URL(pagePath, siteBase).toString();
const imagePath = "/android-chrome-512x512.png";
const absoluteImage = new URL(imagePath, siteBase).toString();

const jsonLd = {
	"@context": "https://schema.org",
	"@type": "WebSite",
	url: siteBase,
	name: "Sun Envidiado",
	description:
		"Personal site of Sun Envidiado — software developer, gamer, and karaoke enthusiast.",
	image: absoluteImage,
	potentialAction: {
		"@type": "SearchAction",
		target: `${siteBase}/?s={search_term_string}`,
		"query-input": "required name=search_term_string",
	},
};

const personJsonLd = {
	"@context": "https://schema.org",
	"@type": "Person",
	name: "Sun Envidiado",
	url: siteBase,
	image: absoluteImage,
	jobTitle: "Software Developer",
};
---

<BaseLayout
	title="Sun Envidiado"
	url={absoluteUrl}
	description="Personal site of Sun Envidiado — software developer, gamer, and karaoke enthusiast."
	image={absoluteImage}
	type="website"
	tags={["home", "sun-envidiado", "developer"]}
	jsonLd={{ ...jsonLd, "@graph": [personJsonLd] }}
>
	<div class="index-main-content">
		<SpinningSunAsciiArt />
		<div class="intro-container">
			<h1 class="sr-only">Sun Envidiado</h1>
			<span class="intro-heading">{introHeading}</span>
			<span class="intro-body">{introBody}</span>
		</div>
		<nav class="command-hints-container" aria-label="Quick commands">
			<div class="command-hints-grid">
				{
					commandHints.map((hint) => (
						<div class="command-hint-row">
							<span class="command-hint-type">{hint.type}</span>
							<span class="command-hint-command">
								{hint.actions.map((action, i) => (
									<span class="command-action-group">
										<a
											class="command-hint-action"
											href="#"
											data-command={action.command}
											aria-label={`Run ${action.command}`}
										>
											{action.label}
										</a>
										{i < hint.actions.length - 1 ? (
											<span class="command-separator"> or </span>
										) : null}
									</span>
								))}
							</span>
							<span class="command-hint-description">{hint.description}</span>
						</div>
					))
				}
			</div>
		</nav>
	</div>
</BaseLayout>

<script>
	// Click delegation for the command hint actions.
	// Behavior:
	// 1) Find the closest `.command-hint-action` anchor from the click target.
	// 2) Prevent default link navigation.
	// 3) Blur the clicked element so it doesn't remain visually focused.
	// 4) If `window.__runSiteCommand` exists, call it to execute the command.
	// 5) Otherwise, fall back to simple navigation or CRT toggles.
	document.addEventListener("click", function (ev) {
		const target = ev.target;
		if (!(target instanceof Element)) return;

		const action = target.closest(".command-hint-action");
		if (!action) return;

		ev.preventDefault();

		// Read the command token from data attribute (preferred) or text content.
		const cmd =
			action.getAttribute("data-command") || (action.textContent || "").trim();

		// Remove focus from the clicked element so it doesn't stay styled as focused.
		const el = action as HTMLElement;
		try {
			el.blur();
		} catch (e) {
			/* ignore */
		}

		// Try to execute using the site's command API if available.
		try {
			const win: any = window as any;
			if (typeof win.__runSiteCommand === "function") {
				win.__runSiteCommand(cmd, true);
				return;
			}
		} catch (e) {
			// ignore and fall back
		}

		switch (cmd) {
			case ":about":
				window.location.href = "/about";
				break;
			case ":contact":
				window.location.href = "/contact";
				break;
			case ":blog":
				window.location.href = "/blog";
				break;
			case ":crt":
				try {
					localStorage.setItem("crt-enabled", "1");
				} catch (_) {}
				document
					.querySelector("#crt-overlay-container")
					?.classList.add("crt-enabled");
				document.body?.classList.add("crt-text-ca");
				break;
			case ":no-crt":
				try {
					localStorage.setItem("crt-enabled", "0");
				} catch (_) {}
				document
					.querySelector("#crt-overlay-container")
					?.classList.remove("crt-enabled");
				document.body?.classList.remove("crt-text-ca");
				break;
			default:
				break;
		}
	});
</script>