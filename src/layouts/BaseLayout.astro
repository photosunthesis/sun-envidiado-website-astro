---
import CommandBar from "../components/CommandBar.astro";
import "../styles/global.css"; // import global styles

const {
  title = "Sun Envidiado",
  description = "Personal website of Sun Envidiado â€” tinkering with code, design, and ascii art.",
  image = "/favicon.svg",
  url = Astro.site || "https://sun-envidiado.com",
  type = "website",
  noIndex = false,
  jsonLd = null,
} = Astro.props;

// Normalize site string (Astro.site can be a URL object in some setups)
const siteStr = String(Astro.site || "");

// Allow pages to pass a pathname-only `url` (e.g. `/blog/my-post`) or a full URL
const canonical = url.startsWith("http")
  ? url
  : siteStr.replace(/\/$/, "") + url;

const fullImage = image.startsWith("http")
  ? image
  : siteStr.replace(/\/$/, "") + image;
---

<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta
      name="robots"
      content={noIndex ? "noindex, nofollow" : "index, follow"}
    />
    <link rel="canonical" href={canonical} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonical} />
    <meta property="og:image" content={fullImage} />

    <!-- Twitter -->
    <meta
      name="twitter:card"
      content={image ? "summary_large_image" : "summary"}
    />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImage} />

    <!-- Allow pages to inject/override head tags via a named slot -->
    <slot name="seo" />

    <!-- Site resources -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />

    {
      jsonLd && (
        <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
      )
    }
  </head>
  <body class="vim-root">
    <div class="main-flex-container">
      <aside id="tilde-column" class="tilde-column" aria-hidden="true"></aside>
      <main class="vim-main-content">
        <div class="centered-vim">
          <slot />
        </div>
      </main>
    </div>
    <CommandBar />
  </body>
  <script type="module">
    // Render tildes to fill the document height (covers overflow) and
    // keep the tilde column purely visual (pointer-events: none)
    function renderTildes() {
      const tildeCol = document.getElementById("tilde-column");
      if (!tildeCol) return;
      const style = getComputedStyle(tildeCol);
      const lineHeight = parseFloat(style.lineHeight) || 24;
      // Column is fixed and floats over the page. Use the viewport height so
      // the column always visually fills the screen. Reserve one line at the
      // bottom for the floating command bar.
      const height = window.innerHeight;
      // Reserve 3 lines at the bottom to ensure the floating command bar is
      // not accidentally covered by tilde characters on small viewports.
      const reservedLines = 3;
      const count = Math.max(0, Math.ceil(height / lineHeight) - reservedLines);
      tildeCol.textContent = Array(count).fill("~").join("\n");
    }
    window.addEventListener("resize", renderTildes);
    window.addEventListener("DOMContentLoaded", renderTildes);
  </script>
</html>
