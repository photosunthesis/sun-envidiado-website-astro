---
import CommandBar from "../components/CommandBar.astro";
import "../styles/main.scss";

const {
  title = "Sun Envidiado",
  description = "Personal website where I share my thoughts about anything and everything.",
  image = "/android-chrome-512x512.png",
  url = Astro.site || "https://sun-envidiado.com",
  type = "website",
  noIndex = false,
  jsonLd = null,
  pubDate = undefined,
  tags = [],
  ...rest
} = Astro.props;

// --- Canonical/OG URL logic ---
const canonical = new URL(
  String(url || "/").replace(/\/?$/, "/"),
  Astro.site || "https://sun-envidiado.com",
).toString();

const fullImage = new URL(
  String(image),
  Astro.site || "https://sun-envidiado.com",
).toString();
---

<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta
      name="robots"
      content={noIndex ? "noindex, nofollow" : "index, follow"}
    />
    <link rel="canonical" href={canonical} />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    <meta name="color-scheme" content="light dark" />
    <meta name="author" content={title} />

    {pubDate && <meta property="article:published_time" content={pubDate} />}
    {
      Array.isArray(tags) &&
        tags.length > 0 &&
        tags.map((tag) => <meta property="article:tag" content={tag} />)
    }

    <!-- Open Graph / Facebook -->
    <meta property="og:site_name" content={title} />
    <meta property="og:type" content={type} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonical} />
    <meta property="og:image" content={fullImage} />

    <!-- Twitter -->
    <meta
      name="twitter:card"
      content={image ? "summary_large_image" : "summary"}
    />
    <meta
      name="twitter:site"
      content={`@${title.replace(/\s+/g, "").toLowerCase()}`}
    />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImage} />

    <!-- Allow pages to inject/override head tags via a named slot -->
    <slot name="seo" />

    <!-- Site resources -->
    <link
      rel="preload"
      href="/fonts/Web437_ToshibaSat_8x14.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <!-- Minimal skip-link styles (hidden visually, visible on keyboard focus) -->
    <style>
      .skip-link {
        position: absolute;
        left: -999px;
        top: auto;
        width: 1px;
        height: 1px;
        overflow: hidden;
        z-index: -999;
      }
      .skip-link:focus {
        position: fixed;
        left: 1rem;
        top: 1rem;
        width: auto;
        height: auto;
        padding: 0.5rem 1rem;
        background: #111;
        color: #fff;
        z-index: 1000;
      }
    </style>

    {
      jsonLd && (
        <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
      )
    }
  </head>
  <body class="vim-root">
    <!-- Skip link for keyboard users -->
    <a class="skip-link" href="#main" aria-label="Skip to main content"
      >Skip to content</a
    >

    <div class="main-flex-container">
      <aside
        id="tilde-column"
        class="tilde-column"
        aria-hidden="true"
        role="presentation"
      >
      </aside>
      <main id="main" class="vim-main-content" tabindex="-1">
        <div class="centered-vim">
          <slot />
        </div>
      </main>
    </div>
    <CommandBar />

    <script type="module">
      // Render tildes to fill the document height (covers overflow) and
      // keep the tilde column purely visual (pointer-events: none)
      function renderTildes() {
        const tildeCol = document.getElementById("tilde-column");
        if (!tildeCol) return;
        const style = getComputedStyle(tildeCol);
        const lineHeight = parseFloat(style.lineHeight) || 24;
        // Column is fixed and floats over the page. Use the viewport height so
        // the column always visually fills the screen. Reserve one line at the
        // bottom for the floating command bar.
        const height = window.innerHeight;
        // Reserve 3 lines at the bottom to ensure the floating command bar is
        // not accidentally covered by tilde characters on small viewports.
        const reservedLines = 3;
        const count = Math.max(
          0,
          Math.ceil(height / lineHeight) - reservedLines,
        );
        tildeCol.textContent = Array(count).fill("~").join("\n");
      }
      window.addEventListener("resize", renderTildes);
      window.addEventListener("DOMContentLoaded", renderTildes);
    </script>
  </body>
</html>
